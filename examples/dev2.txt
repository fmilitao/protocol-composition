// Simple Monotonic 2-State Counter
	//	rec X.( N => P ; rec Y.( P => N ; X & N => P ; Y ) )
	//	>>
	//	rec X.( N => P ; P => N ; X )
	//	||	rec X.( N => P ; X )
typedef NN[p] = rw p Z#[]+NZ#int
typedef PP[p] = rw p NZ#int

typedef IncOnly[p] =  NN[p] => PP[p] ; IncOnly[p]
typedef Any[p] = NN[p] => PP[p]; PP[p] => NN[p] ; Any[p]

typedef M0[p] = NN[p] => PP[p] ; M1[p]
// this is not well formed due to the choices being ambiguous.
typedef M1[p] = ( PP[p] => NN[p] ; M0[p] ) & ( NN[p] => PP[p] ; M1[p] )

<t> share NN[t] as IncOnly[t] || Any[t]
<t> share M0[t] as IncOnly[t] || Any[t]

<t> share IncOnly[t] as IncOnly[t] || IncOnly[t]
<t> not share Any[t] as Any[t] || Any[t]



/*
// these types are invalid because they are bottom types.
typedef X = X
typedef A = B
typedef B = A
typedef X<x,y> = Y[y,x]
typedef Y<y,x> = X[x,y]
*/



// ======= //
// the general case for checking the following may not terminate.
// Thus, they are disallowed.
//typedef H[X] = forall Y <: X.H[Y]
//typedef T = forall X. forall Y <: X. [ X , Y ]
//    equals H[int] == H[int]
//not equals H[int] == H[boolean]
// <X> not equals (forall Y <: X.H[Y]){boolean/X} == H[int]
// <X> equals (forall Y <: X.H[Y]){int/X} == forall Y <: int.H[Y]
// <Z> equals exists X<:Z.X == exists Y<:Z.Y
// <Z><W> not equals exists X<:W.X == exists Y<:Z.Y
//<B><A <: B> subtype forall X<:B.X <: A // X == A, iff A <: B
//<B><A <: B> subtype A <: exists X<:B.X // X == A, iff A <: B
// this should fail at the type creation level, since W is not bound on the right of <:
//subtype exists X<:int.X <: exists W<:W.W

