

// the following would generate a 'trail' collision
// if DeBruijn indexes did not include the bound on type variables

typedef D[A] = A
typedef Full[p,B] = rw p B => forall Y.( rw p Y ; Full[p,Y] )

<q> not equals Full[q,boolean] == Full[q,int]
<q><p> not equals Full[q,int] == Full[p,int]

//<q> equals Full[q,int] == Full[q,int]

< X <: int >
 not subtype a#D[X] + b#exists X<:boolean.D[X]
          <: a#int  + b#exists Y<:boolean.int

// ==================== //

// simple cases

    subtype int <: int
    subtype boolean <: boolean
not subtype int <: boolean

    subtype !int <: int
    subtype !boolean <: boolean
    subtype int <: !int
    subtype boolean <: !boolean

not subtype int <: none
not subtype none <: int

    subtype [a:int,b:int] <: [a:int]
not subtype [a:int] <: [a:int,b:int]
not subtype [a:int,b:int] <: [a:int,b:boolean]
not subtype [a:int,b:boolean] <: [a:int,b:int]

not subtype ![] <: none
not subtype ![] <: int
not subtype [a:!int,b:!boolean] <: ![]

subtype !int <: ![]
subtype !boolean <: ![]

   <p>     subtype ref p <: ref p
<p><q> not subtype ref p <: ref q 
<p><q> not subtype ref q <: ref p

not subtype int -o boolean <: boolean -o int
not subtype boolean -o int <: int -o boolean

subtype !int -o boolean <: int -o boolean
subtype int -o boolean <: !int -o boolean

// contra-variant
not subtype [] -o boolean <: [a:int] -o boolean
    subtype [a:int] -o boolean <: [a:int,b:int] -o boolean

// co-variant
    subtype int -o ![a:int] <: int -o [a:int]
not subtype int -o [a:int] <: int -o ![a:int]

// tuples
    subtype [] <: []
not subtype [] <: [int]
not subtype [int] <: []
not subtype [int,boolean] <: [boolean,int]
not subtype [boolean,int] <: [int,boolean]

    subtype l#int <: l#int
    subtype l#int <: l#int + k#boolean
not subtype l#int + k#boolean <: l#int

   <p>     subtype rw p int <: rw p int
<q><p> not subtype rw p int <: rw q int
<q><p> not subtype rw q int <: rw p int

    subtype int::boolean <: int::boolean
    subtype boolean::int <: boolean::int
not subtype boolean::int <: int::boolean
not subtype int::boolean <: boolean::int

subtype int * boolean <: boolean * int
subtype boolean * int <: int * boolean

not subtype int * boolean * int <: int * boolean
not subtype int * boolean <: int * int * boolean

    subtype int => boolean <: int => boolean
not subtype int => boolean <: boolean => int 

<X>        subtype X <: X
<X><Y> not subtype X <: Y
<X><Y> not subtype Y <: X 

    subtype forall X.X <: forall Y.Y
    subtype forall Z.!Z <: forall X.X
not subtype forall X.X <: forall Z.!Z

    subtype exists X.X <: exists Y.Y
not subtype exists X.X <: exists Z.!Z
    subtype exists Z.!Z <: exists Z.Z

<X><Y><Z>     subtype X (+) Y (+) Z <: X (+) Z (+) Y
<X><Y><Z>     subtype X (+) Y <: X (+) Z (+) Y
<X><Y><Z> not subtype X (+) Y <: X

<t> not subtype rw t int <: rw t boolean 

<X><Y><Z>     subtype X & Y & Z <: X & Z
<X><Y><Z> not subtype X <: X & Z
<Z><X>    not subtype X <: X & Z

    subtype label#int + tag#int <: exists X.( label#X + tag#X )
not subtype label#boolean + tag#int <: exists X.( label#X + tag#X )

// bounds tests

< X<:int >< Y<:int > not subtype X <: Y
< X<:int >< Y<:int > not equals X == Y

<t> subtype rw t int <: exists q.rw q int
    subtype int -o !int <: exists X.( X -o !X )

<Y> subtype forall X.( label#X + tag#X + blah#X ) <: label#Y + tag#Y + blah#Y
<Y> not subtype forall X.( label#X + tag#X ) <: label#Y + tag#Y + blah#Y

<A> subtype A <: exists X.X // X == A
<A> subtype forall X.X <: A // X == A

equals forall X.(forall X.forall X.X){int/X} == forall X.forall X.forall X.X
equals forall X.forall X.forall X.X == forall X.forall X.forall X.X
equals exists X.X == exists Y<:top.Y
equals forall X.X == forall Z<:top.Z

not equals exists X.X == exists Y<:int.Y

subtype exists X.X <: exists Y.Y
subtype exists X<:top.X <: exists Z.Z // implicit top

subtype exists X<:int.X <: exists W<:int.W

not subtype exists X<:boolean.X <: exists P.P
not subtype exists X<:!int.X <: exists W<:int.W
not subtype exists X<:int.X <: exists W<:!int.W

     equals exists X<:int.X == exists Y<:int.Y
 not equals exists X<:int.X == exists Y<:boolean.Y

// typedefs cannot refer other variables in scope
// their substitution is straightforward and OK!
typedef Def[X,Y] = X

<X> equals Def[X,X] == X


// unification tests with * --- same case/code as &, (+).

subtype int * boolean * int <: exists X.( int * X * int )
subtype int * boolean * int <: exists X.( int * int * X )
subtype int * boolean * int <: exists X.( int * X )
subtype int * boolean * int <: exists X.( boolean * X )

not subtype int * int <: exists X.( boolean * X )

subtype int * boolean * int <: exists X.( X * X * boolean )
subtype int * boolean * boolean * int <: exists X.( X * X )

not subtype boolean * boolean * int <: exists X.( X * X )
not subtype int * boolean * string <: exists X.( int * X * X )
not subtype int * boolean * boolean * int <: exists X.( X * X * X )

<q>     subtype rw q int <: exists w.rw w int
<q> not subtype rw q int <: exists w.rw w boolean

// unification through forall type:

    subtype forall X<:int.X <: int
    subtype forall X<:int.X <: forall X<:int.int
not subtype forall X.int <: forall X<:int.X


// ======= //
// the general case for checking the following may not terminate.
// Thus, they are disallowed.
//typedef H[X] = forall Y <: X.H[Y]
//typedef T = forall X. forall Y <: X. [ X , Y ]
//    equals H[int] == H[int]
//not equals H[int] == H[boolean]
// <X> not equals (forall Y <: X.H[Y]){boolean/X} == H[int]
// <X> equals (forall Y <: X.H[Y]){int/X} == forall Y <: int.H[Y]
// <Z> equals exists X<:Z.X == exists Y<:Z.Y
// <Z><W> not equals exists X<:W.X == exists Y<:Z.Y
