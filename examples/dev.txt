
share none as none || none

// === Asymmetrically Shared Pair ===

typedef P[p,A,B] = rw p [A,B]
typedef L[p,A] = exists X.( P[p,A,X] => forall Y.( P[p,Y,X] ; L[p,Y] ) )
typedef R[p,A] = exists X.( P[p,X,A] => forall Y.( P[p,X,Y] ; R[p,Y] ) )

<q> share P[q,int,boolean] as L[q,int] || R[q,boolean]
<q><A><B> share P[q,A,B] as L[q,A] || R[q,B]


// === Pipe Example ===

typedef   Node[p] = exists q.( (rw p Node#![element: int, next: ref q]) * H[q] )
typedef  Close[p] = rw p Close#![]
typedef  Empty[p] = rw p Empty#![]
typedef Hide[p,A] = rw p Empty#A

typedef T[p] = Empty[p] => ( Close[p] (+) Node[p] )
typedef H[p] = ( Node[p] => Node[p] ; Node[p] ) (+)
				( Close[p] => Close[p] ; Close[p] ) (+)
				( exists X.( Hide[p,X] => Hide[p,X] ; H[p] ) ) // retries H

<q> equals H[q] == H[q]
<q> equals T[q] == T[q]
<q> subtype H[q] <: H[q]
<q> subtype T[q] <: T[q]

<q> share Empty[q] as T[q] || H[q]

// === Existential-Universal Split ===

// v1
typedef Nothing[p] = exists X.( rw p X => rw p X ; Nothing[p] )
typedef  Full[p,B] = rw p B => forall Y.( rw p Y ; Full[p,Y] )

<q> share (rw q int) as Nothing[q] || Full[q,int]

// v2
typedef Any[p] = exists Y.( rw p Y => forall X.( rw p Y ; Any[p] ) )

<q> share (rw q int) as Any[q] || Any[q]
<q> share Any[q] as Any[q] || Any[q]

// v3
typedef W = int -o int
typedef Q = int -o boolean

typedef AO = ![add: W]
typedef AR = ![add: W, remove: Q]

typedef AddOnly[p]     = exists X <: AO.( rw p X => rw p X ; AddOnly[p] )
typedef AddRemove[p,B] = rw p B => forall Y <: AR.( rw p Y ; AddRemove[p,Y] )

<q> share (rw q AR) as AddOnly[q] || AddRemove[q,AR]

// === Extending Existing Step ===

// v0
typedef Hold0[p] = ( (rw p Held#[]) => (rw p Held#[]) ; Hold0[p] ) &
					( (rw p Held#[]) => (rw p Free#int) ; none )
typedef Wait0[p] = ( (rw p Held#[]) => (rw p Held#[]) ; Wait0[p] ) (+)
					( (rw p Free#int) => (rw p Free#int) ; (rw p Free#int) )

<q> share (rw q Held#[]) as Hold0[q] || Wait0[q]

// v1
typedef WaitP[p] = exists A.( ( (rw p Held#A) => (rw p Held#A) ; WaitP[p] )
					(+) ( (rw p Free#int) => (rw p Free#int) ; (rw p Free#int) ) )
typedef Hold[p,A] = ( (rw p Held#A) => forall B.( (rw p Held#B) ; Hold[p,B] ) )
					& ( (rw p Held#A) => (rw p Free#int) ; none )

<q> share (rw q Held#int) as WaitP[q] || Hold[q,int]
<q><A> share (rw q Held#A) as WaitP[q] || Hold[q,A]

// v2 - re-split of Hold
typedef Hold1[p] = ( (rw p Held#(Inner#[])) => (rw p Held#Inner#[]) ; Hold1[p] )
					(+) ( (rw p Held#Done#int) => (rw p Free#int) )
typedef Hold2[p] = (rw p Held#(Inner#[])) => (rw p Held#(Done#int))

<q> share Hold[q,(Inner#[])] as Hold1[q] || Hold2[q]


// === JOIN ===

typedef   Wait[t] = rw t Wait#[]
typedef Result[t] = rw t Result#int
typedef   Done[t] = rw t int

typedef F[t] = Wait[t] => Result[t] ; none
typedef M[t] = ( Wait[t] => Wait[t] ; M[t] ) (+) ( Result[t] => Done[t] ; Done[t] )

<q> share (Wait[q]) as F[q] || M[q]

// === FUTURES ===

typedef Join[t] = (rw t Empty#[]) => (rw t Done#int) ; none
typedef Future[t] =
	( (rw t Empty#[]) => (rw t Empty#[]) ; Future[t] )
	(+) 
	// choice on what to do: either leave it as done or recover
	( ( (rw t Done#int) => (rw t int) ; (rw t int) ) & ( exists Y.( (rw t Done#Y) => (rw t Done#Y) ; Future[t] ) ) )

<q> share (rw q Empty#[]) as Future[q] || Join[q]


/*

// === OLD RE-SPLIT EXAMPLES ===

// 1.
typedef R = E => E ; R & E => N (+) C; ( ( N => N ; N ) (+) ( C => C ; C ) )
// splits into:
typedef R0 = E => N (+) C ; none
typedef R1 = E => E; R1 (+) ( N => N ; N ) (+) ( C => C;C )

// 2. U splits arbitrarily
typedef U = NE (+) E => NE ; UN
typedef UN = NE => NE ; UN

// 3.
typedef M = N => P ; M
typedef MM = ( P => N; M ) & ( N => P; MM )

// 4.
typedef J = ( (F => F; J) & (F => R; R => R; R) )
typedef J0 = F => R ; none
typedef J1 = ( F => F ; J1 ) (+) ( R => R ; R )
// re-split:
typedef J10 = ( F => F; J10 ) (+) ( R => D )
typedef J11 = ( F => F; J11 ) (+) J11A
typedef J11A = ( R => R; J11A ) (+) ( D => D; D )

// 5.
typedef L = H => F ; F => F; F
typedef LL = ( H => F ; none ) (+) ( F => F ; F )

*/

/*
// these types are invalid because they are bottom types.
typedef X = X
typedef A = B
typedef B = A
typedef X<x,y> = Y[y,x]
typedef Y<y,x> = X[x,y]
*/

