//FIXME: well-formed check will flag some cases as wrong!
//FIXME: this does not correctly recover ownership when considering the lock model!!

/* === CONFORMANCE TESTS === */

share none as none || none

// Pipe
typedef Head[p] =	( rw p !(Empty#[]) => rw p !(Empty#[]) ; Head[p] ) (+)
					( rw p !(Closed#[]) => none ) (+) 
					( rw p (Node#[int,exists q.(!ref q :: Head[q] )]) => none )

typedef Tail[p] =  (rw p !Empty#[]) => ( (rw p !Closed#[]) (+) (rw p Node#[int,exists q.(!ref q :: Head[q])]) )

<l> share (rw l !Empty#[]) as Head[l] || Tail[l]

// Iteratively Sharing
typedef G[f,c] = (rw f Free#[]) * (rw c [])
typedef W[f,c] = (rw f Raw#[]) * (rw c int)
typedef K[f,c] = (rw f Done#[]) * (rw c boolean)

typedef Receiver   [f,c] = G[f,c] => W[f,c]
typedef Compressor [f,c] = ( G[f,c] => G[f,c] ; Compressor[f,c] ) (+) 
									( W[f,c] => K[f,c] )

typedef Storer  [f,c] = ( G[f,c] => G[f,c] ; Storer[f,c] ) (+) Storer_[f,c] 
typedef Storer_ [f,c] = ( W[f,c] => W[f,c] ; Storer_[f,c] ) (+) ( K[f,c] => none )

typedef TMP  [f,c] = ( G[f,c] => G[f,c] ; TMP[f,c] ) (+) TMP_[f,c]
typedef TMP_ [f,c] = ( W[f,c] => W[f,c] ; TMP_[f,c] ) & ( W[f,c] => K[f,c] ; K[f,c] => none )

<f><c> share G[f,c] as Receiver[f,c] || TMP[f,c]
<f><c> share TMP[f,c] as Storer[f,c] || Compressor[f,c]

// Hold/Free
typedef Held[t] = rw t Held#[]
typedef Free[t] = rw t Free#int

typedef A[p] = ( Held[p] => Held[p] ; A[p] ) & ( Held[p] => Held[p] ; A[p] )
typedef B[p] = ( Held[p] => Held[p] ; B[p] ) & ( Held[p] => Free[p] ; Free[p] )

<t> share Held[t] as B[t] || none
<t> share Held[t] as A[t] || A[t]

// other tests
typedef P[l] = ( Held[l] => Held[l] ; P[l] ) & ( Held[l] => Free[l] ; Free[l] )
typedef P0[l] = ( Held[l] => Held[l] ; P0[l] ) (+) ( Free[l] => Free[l] ; Free[l] )
typedef P1[l] = ( Held[l] => Free[l] )

typedef P3[l] = ( Held[l] => Held[l] ; P3[l] ) (+) ( Free[l] => Held[l] ; Held[l] )
typedef P4[l] = ( Held[l] => Held[l] ; P4[l] ) & ( Held[l] => Free[l] ; Free[l] => Held[l] ; Held[l] )

<t> share P[t] as P0[t] || P1[t]
<t> share P4[t] as P3[t] || P1[t]

// Old Re-Splitting Examples:

//	rec X.( F => F ; X & F => R ; R => R ; R )
//	>> F => R
//	|| ( rec X.( F => F ; X (+) R => R ; R )
//		>> rec X.( F => F ; X (+) R => D )
//		|| rec X.( F => F ; X (+) rec Y.( R => R ; Y (+) D => D; D ) ) )
typedef R[p] = rw p R#[]
typedef F[p] = rw p F#int
typedef D[p] = rw p D#boolean

typedef P_0[p] = ( F[p] => F[p] ; P_0[p] ) & ( F[p] => R[p] ; R[p] => R[p] ; R[p] )
typedef P_1[p] = F[p] => R[p]
typedef P_2[p] = ( F[p] => F[p] ; P_2[p] ) (+) ( R[p] => R[p] ; R[p] )

<t> share P_0[t] as P_1[t] || P_2[t]

typedef Q_0[p] = ( F[p] => F[p] ; Q_0[p] ) (+) ( R[p] => R[p] ; R[p] => D[p] )
typedef Q_1[p] = ( F[p] => F[p] ; Q_1[p] ) (+) Q_2[p]
typedef Q_2[p] = ( R[p] => R[p] ; Q_2[p] ) (+) ( D[p] => D[p] ; D[p] )

<t> share P_2[t] as Q_0[t] || Q_1[t]

// Only one recovers ownership
	//	H => F ; F => F ; F
	// >> H => F ; none (+) F => F ; F
	// || H => F ; none (+) F => F ; F
typedef FF[p] = rw p F#[]
typedef HH[p] = rw p H#int

<t> share (HH[t] => FF[t] ; FF[t] => FF[t] ; FF[t] ) as
	  ( HH[t] => FF[t] ; none ) (+) ( FF[t] => FF[t] ; FF[t] )
	||( HH[t] => FF[t] ; none ) (+) ( FF[t] => FF[t] ; FF[t] )

// Simple Monotonic 2-State Counter
	//	rec X.( N => P ; rec Y.( P => N ; X & N => P ; Y ) )
	//	>>
	//	rec X.( N => P ; P => N ; X )
	//	||	rec X.( N => P ; X )
typedef NN[p] = rw p Z#[]+NZ#int
typedef PP[p] = rw p NZ#int

typedef IncOnly[p] =  NN[p] => PP[p] ; IncOnly[p]
typedef Any[p] = NN[p] => PP[p]; PP[p] => NN[p] ; Any[p]

typedef M0[p] = NN[p] => PP[p] ; M1[p]
typedef M1[p] = ( PP[p] => NN[p] ; M0[p] ) & ( NN[p] => PP[p] ; M1[p] )

<t> share NN[t] as IncOnly[t] || Any[t]
<t> share M0[t] as IncOnly[t] || Any[t]

<t> share IncOnly[t] as IncOnly[t] || IncOnly[t]
<t> not share Any[t] as Any[t] || Any[t]

// Pipe
	//	    rec X.( E => E ; X & E => N (+) C ; ( N => N ; N ) (+) ( C => C ; C ) )
	//	>>	E => N (+) C ; none
	//	||	rec X.( E => E ; X (+) ( N => N ; N ) (+) ( C => C ; C ) )
typedef N[p] = exists q.( (rw p Node#![element: int, next: ref q]) * H[q] )
typedef C[p] = rw p Close#![]
typedef E[p] = rw p Empty#![]

typedef T[p] = E[p] => ( N[p] (+) C[p] ) ; none
typedef H[p] = ( E[p] => E[p] ; H[p] ) (+) ( N[p] => N[p] ; N[p] ) (+) ( C[p] => C[p] ; C[p] )

typedef O[p] = ( E[p] => E[p] ; O[p] ) & ( E[p] => N[p] (+) C[p] ; ( N[p] => N[p] ; N[p] ) (+) ( C[p] => C[p] ; C[p] ) )

<t> share O[t] as T[t] || H[t]

// old "monotonically sharing ADT" example
	// NE -> non-empty stack and E for empty stack.
	// U = ( NE (+) E ) => NE ; rec X.( NE => NE ; X )

typedef U[t] = ( (rw t NE#[]) (+) (rw t E#[]) ) => (rw t NE#[]) ; UN[t]
typedef UN[t] = (rw t NE#[]) => (rw t NE#[]) ; UN[t]

<q> share (rw q NE#[]) as U[q] || U[q]
<q> share U[q] as U[q] || U[q]
