
// The welcome file should also contain all examples and tests

typedef A = int

typedef X = exists A.exists B.( l#A + q#B )

typedef Buggy<q,l> = tag#(ref q) + teg#(ref l)

typedef H<p> =
			( rw p !(Empty#[]) => rw p !(Empty#[]) ; H[p] ) (+)
			( rw p !(Closed#[]) => none ) (+) 
			( rw p (Node#[int,exists q.(!ref q :: (H[q]) )]) => none )

typedef T<p> =  rw p !(Empty#[]) =>
	( (rw p !(Closed#[])) (+) (rw p (Node#[int,exists q.(!ref q :: (H[q]))])) )


subtype [a:int,b:int] <: [a:int]
<B>subtype [a:int,b:B] <: [a:int]
subtype int <: !int
not subtype int <: boolean

share A as A => none ; none || none

<l>share (rw l !(Empty#![])) as (H[l]) || (T[l])

