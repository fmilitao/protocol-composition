
typedef A = int

typedef H<p> =
			( rw p !(Empty#[]) => rw p !(Empty#[]) ; H[p] ) (+)
			( rw p !(Closed#[]) => none ) (+) 
			( rw p (Node#[int,exists q.(!ref q :: (H[q]) )]) => none )

typedef T<p> =  rw p !(Empty#[]) =>
	( (rw p !(Closed#[])) (+) (rw p (Node#[int,exists q.(!ref q :: (H[q]))])) )


subtype int <: !int
not subtype int <: boolean

share A as A => none ; none || none

<l>share (rw l !(Empty#![])) as (H[l]) || (T[l])

