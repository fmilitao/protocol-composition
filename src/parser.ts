/// <reference path='../lib/def/jison.d.ts' />

// 'parser.parse' must work exactly as the 'var parser' generated by Jison.
// therefore, we must use lower-case module name for this.
module Jison {

    // WebWorker will have to consider '../' to reach 'src/' root.
    const GRAMMAR = ((typeof window) === 'undefined' ? '../' : '') + 'src/parser.jison';

    export const parser = GenerateParser(GRAMMAR);

    function GenerateParser(file: string) {

        var Jison = require('jison');
        var bnf = require('jison/bnf');

        // synchronous fetch of grammar file (this doesn't work locally due to
        // permissions on fetching from javascript, must be run in a server)
        var r = new XMLHttpRequest();
        r.open("GET", file, false); // async fetch
        r.send(null);
        if (r.status !== 200) {
            // some error HTTP code other than OK
            throw new Error('Failed to fetch grammar "' + file + '" (' + r.status + ')');
        }

        var cfg = bnf.parse(r.responseText);
        var parser = new Jison.Generator(cfg, { type: "lalr" });

        if (parser.conflicts) {
            // taken from Jison's example file
            var msg = 'Error generating parser, conflicts encountered:';
            parser.resolutions.forEach(function(res) {
                var r = res[2];
                if (!r.bydefault)
                    return null;
                msg = msg + '\n' +
                // Jison's style error message
                (r.msg + "\n" + "(" + r.s + ", " + r.r + ") -> " + r.action);
            });
            throw new Error(msg);
        }

        return parser.createParser();
    };

};

const parser : any = Jison.parser;
