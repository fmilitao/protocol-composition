/* Jison generated parser */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"EOF":4,"program":5,"t":6,"NONE":7,"TOP":8,"INT_TYPE":9,"BOOLEAN_TYPE":10,"STRING_TYPE":11,"!":12,"id":13,"REF":14,"IDENTIFIER":15,"(":16,")":17,"RW":18,"[":19,"]":20,"field_types":21,"type_list":22,"FORALL":23,".":24,"<:":25,"EXISTS":26,"{":27,"/":28,"}":29,"sum_type":30,"=>":31,";":32,"-o":33,"::":34,"*":35,"&":36,"(+)":37,"#":38,"+":39,",":40,"field_type":41,":":42,"sequence":43,"blocks":44,"typedefs":45,"typedef":46,"TYPEDEF":47,"=":48,"ids_list":49,"forall":50,"<":51,">":52,"share":53,"subtype":54,"equals":55,"SHARE":56,"AS":57,"||":58,"NOT":59,"SUBTYPE":60,"EQUALS":61,"==":62,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:"NONE",8:"TOP",9:"INT_TYPE",10:"BOOLEAN_TYPE",11:"STRING_TYPE",12:"!",14:"REF",15:"IDENTIFIER",16:"(",17:")",18:"RW",19:"[",20:"]",23:"FORALL",24:".",25:"<:",26:"EXISTS",27:"{",28:"/",29:"}",31:"=>",32:";",33:"-o",34:"::",35:"*",36:"&",37:"(+)",38:"#",39:"+",40:",",42:":",47:"TYPEDEF",48:"=",51:"<",52:">",56:"SHARE",57:"AS",58:"||",59:"NOT",60:"SUBTYPE",61:"EQUALS",62:"=="},
productions_: [0,[3,1],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,3],[6,3],[6,2],[6,3],[6,3],[6,4],[6,6],[6,4],[6,6],[6,6],[6,1],[6,3],[6,3],[6,3],[6,4],[6,3],[6,3],[6,3],[6,3],[30,3],[30,5],[22,1],[22,3],[13,1],[41,3],[21,1],[21,3],[5,1],[5,2],[5,1],[44,2],[44,3],[45,1],[45,2],[46,4],[46,7],[49,1],[49,3],[43,1],[43,2],[50,4],[50,6],[50,1],[50,1],[50,1],[53,6],[53,7],[54,4],[54,5],[55,4],[55,5]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new AST.Exp.Program(null,[],this._$); 
break;
case 2: return $$[$0-1]; 
break;
case 3: this.$ = new AST.Type.None(this._$); 
break;
case 4: this.$ = new AST.Type.Top(this._$); 
break;
case 5: this.$ = new AST.Type.Primitive(yytext,this._$); 
break;
case 6: this.$ = new AST.Type.Primitive(yytext,this._$); 
break;
case 7: this.$ = new AST.Type.Primitive(yytext,this._$); 
break;
case 8: this.$ = new AST.Type.Bang($$[$0],this._$); 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = new AST.Type.Reference($$[$0],this._$); 
break;
case 11: this.$ = $$[$0-1]; 
break;
case 12: this.$ = new AST.Type.Capability($$[$0-1],$$[$0],this._$); 
break;
case 13: this.$ = new AST.Type.Record([],this._$); 
break;
case 14: this.$ = new AST.Type.Record($$[$0-1],this._$); 
break;
case 15: this.$ = new AST.Type.Tuple($$[$0-1],this._$); 
break;
case 16: this.$ = new AST.Type.Forall($$[$0-2],$$[$0],null,this._$); 
break;
case 17: this.$ = new AST.Type.Forall($$[$0-4],$$[$0],$$[$0-2],this._$); 
break;
case 18: this.$ = new AST.Type.Exists($$[$0-2],$$[$0],null,this._$); 
break;
case 19: this.$ = new AST.Type.Exists($$[$0-4],$$[$0],$$[$0-2],this._$); 
break;
case 20: this.$ = new AST.Type.Substitution($$[$0-5],$$[$0-3],$$[$0-1],this._$); 
break;
case 21: this.$ = new AST.Type.Sum($$[$0],this._$); 
break;
case 22: this.$ = new AST.Type.Rely($$[$0-2],$$[$0],this._$); 
break;
case 23: this.$ = new AST.Type.Guarantee($$[$0-2],$$[$0],this._$); 
break;
case 24: this.$ = new AST.Type.Function($$[$0-2],$$[$0],this._$); 
break;
case 25: this.$ = new AST.Type.Definition($$[$0-3],$$[$0-1],this._$); 
break;
case 26: this.$ = new AST.Type.Stacked($$[$0-2],$$[$0],this._$); 
break;
case 27: this.$ = new AST.Type.Star($$[$0-2],$$[$0],this._$); 
break;
case 28: this.$ = new AST.Type.Intersection($$[$0-2],$$[$0],this._$); 
break;
case 29: this.$ = new AST.Type.Alternative($$[$0-2],$$[$0],this._$); 
break;
case 30: this.$ = [new AST.Type.Tagged($$[$0-2],$$[$0],this._$)]; 
break;
case 31: this.$ = [new AST.Type.Tagged($$[$0-4],$$[$0-2],this._$)].concat($$[$0]); 
break;
case 32: this.$ = [$$[$0]]; 
break;
case 33: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 34: this.$ = new AST.Type.Name(yytext,this._$); 
break;
case 35: this.$ = new AST.Type.Field($$[$0-2],$$[$0],this._$); 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 38: this.$ = new AST.Exp.Program(null,$$[$0],this._$); 
break;
case 39: this.$ = new AST.Exp.Program($$[$0].typedefs,$$[$0-1].concat($$[$0].exp),this._$); 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = new AST.Exp.Program($$[$0-1],$$[$0],this._$); 
break;
case 42: this.$ = new AST.Exp.Program($$[$0-2].concat($$[$0].typedefs),$$[$0-1].concat($$[$0].exp),this._$); 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 45: this.$ = new AST.Exp.TypeDef($$[$0-2],$$[$0],null,this._$); 
break;
case 46: this.$ = new AST.Exp.TypeDef($$[$0-5],$$[$0],$$[$0-3],this._$); 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: this.$ = $$[$0-2].concat($$[$0]); 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = $$[$0-1].concat($$[$0]); 
break;
case 51: this.$ = [new AST.Exp.Forall($$[$0-2],$$[$0][0],null,this._$)]; 
break;
case 52: this.$ = [new AST.Exp.Forall($$[$0-4],$$[$0][0],$$[$0-2],this._$)]; 
break;
case 53: this.$ = $$[$0]; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = [new AST.Exp.Share(true,$$[$0-4],$$[$0-2],$$[$0],this._$)]; 
break;
case 57: this.$ = [new AST.Exp.Share(false,$$[$0-4],$$[$0-2],$$[$0],this._$)]; 
break;
case 58: this.$ = [new AST.Exp.Subtype(true,$$[$0-2],$$[$0],this._$)]; 
break;
case 59: this.$ = [new AST.Exp.Subtype(false,$$[$0-2],$$[$0],this._$)]; 
break;
case 60: this.$ = [new AST.Exp.Equals(true,$$[$0-2],$$[$0],this._$)]; 
break;
case 61: this.$ = [new AST.Exp.Equals(false,$$[$0-2],$$[$0],this._$)]; 
break;
}
},
table: [{3:1,4:[1,2],5:3,43:4,44:5,45:7,46:12,47:[1,17],50:6,51:[1,8],53:9,54:10,55:11,56:[1,13],59:[1,14],60:[1,15],61:[1,16]},{1:[3]},{1:[2,1]},{4:[1,18]},{4:[2,38],44:19,45:7,46:12,47:[1,17]},{4:[2,40]},{4:[2,49],43:20,47:[2,49],50:6,51:[1,8],53:9,54:10,55:11,56:[1,13],59:[1,14],60:[1,15],61:[1,16]},{43:21,50:6,51:[1,8],53:9,54:10,55:11,56:[1,13],59:[1,14],60:[1,15],61:[1,16]},{15:[1,22]},{4:[2,53],47:[2,53],51:[2,53],56:[2,53],59:[2,53],60:[2,53],61:[2,53]},{4:[2,54],47:[2,54],51:[2,54],56:[2,54],59:[2,54],60:[2,54],61:[2,54]},{4:[2,55],47:[2,55],51:[2,55],56:[2,55],59:[2,55],60:[2,55],61:[2,55]},{45:23,46:12,47:[1,17],51:[2,43],56:[2,43],59:[2,43],60:[2,43],61:[2,43]},{6:24,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{56:[1,40],60:[1,41],61:[1,42]},{6:43,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:44,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{15:[1,45]},{1:[2,2]},{4:[2,39]},{4:[2,50],47:[2,50]},{4:[2,41],44:46,45:7,46:12,47:[1,17]},{25:[1,48],52:[1,47]},{51:[2,44],56:[2,44],59:[2,44],60:[2,44],61:[2,44]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],57:[1,49]},{4:[2,3],17:[2,3],20:[2,3],24:[2,3],25:[2,3],27:[2,3],28:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],39:[2,3],40:[2,3],47:[2,3],51:[2,3],52:[2,3],56:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3],61:[2,3],62:[2,3]},{4:[2,4],17:[2,4],20:[2,4],24:[2,4],25:[2,4],27:[2,4],28:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],39:[2,4],40:[2,4],47:[2,4],51:[2,4],52:[2,4],56:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4],61:[2,4],62:[2,4]},{4:[2,5],17:[2,5],20:[2,5],24:[2,5],25:[2,5],27:[2,5],28:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],39:[2,5],40:[2,5],47:[2,5],51:[2,5],52:[2,5],56:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5],61:[2,5],62:[2,5]},{4:[2,6],17:[2,6],20:[2,6],24:[2,6],25:[2,6],27:[2,6],28:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],39:[2,6],40:[2,6],47:[2,6],51:[2,6],52:[2,6],56:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6],61:[2,6],62:[2,6]},{4:[2,7],17:[2,7],20:[2,7],24:[2,7],25:[2,7],27:[2,7],28:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],39:[2,7],40:[2,7],47:[2,7],51:[2,7],52:[2,7],56:[2,7],57:[2,7],58:[2,7],59:[2,7],60:[2,7],61:[2,7],62:[2,7]},{6:58,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{4:[2,9],17:[2,9],20:[2,9],24:[2,9],25:[2,9],27:[2,9],28:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],39:[2,9],40:[2,9],47:[2,9],51:[2,9],52:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9]},{15:[1,59]},{6:60,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{15:[1,61]},{6:66,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,67],16:[1,33],18:[1,34],19:[1,35],20:[1,62],21:63,22:64,23:[1,36],26:[1,37],30:38,41:65},{15:[1,68]},{15:[1,69]},{4:[2,21],17:[2,21],20:[2,21],24:[2,21],25:[2,21],27:[2,21],28:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],39:[2,21],40:[2,21],47:[2,21],51:[2,21],52:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21]},{4:[2,34],17:[2,34],19:[1,70],20:[2,34],24:[2,34],25:[2,34],27:[2,34],28:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[1,71],39:[2,34],40:[2,34],47:[2,34],51:[2,34],52:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34]},{6:72,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:73,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:74,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{25:[1,75],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],62:[1,76]},{19:[1,78],48:[1,77]},{4:[2,42]},{50:79,51:[1,8],53:9,54:10,55:11,56:[1,13],59:[1,14],60:[1,15],61:[1,16]},{6:80,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:81,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:82,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:83,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:84,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:85,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:86,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:87,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:88,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:89,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{4:[2,8],17:[2,8],20:[2,8],24:[2,8],25:[2,8],27:[2,8],28:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],39:[2,8],40:[2,8],47:[2,8],51:[2,8],52:[2,8],56:[2,8],57:[2,8],58:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8]},{4:[2,10],17:[2,10],20:[2,10],24:[2,10],25:[2,10],27:[2,10],28:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],39:[2,10],40:[2,10],47:[2,10],51:[2,10],52:[2,10],56:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10]},{17:[1,90],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{6:91,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{4:[2,13],17:[2,13],20:[2,13],24:[2,13],25:[2,13],27:[2,13],28:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],39:[2,13],40:[2,13],47:[2,13],51:[2,13],52:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13]},{20:[1,92]},{20:[1,93],40:[1,94]},{20:[2,36],40:[1,95]},{20:[2,32],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],40:[2,32]},{19:[1,70],20:[2,34],27:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[1,71],40:[2,34],42:[1,96]},{24:[1,97],25:[1,98]},{24:[1,99],25:[1,100]},{6:66,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],22:101,23:[1,36],26:[1,37],30:38},{6:102,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],57:[1,103]},{25:[1,104],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],62:[1,105]},{6:106,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:107,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:108,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{15:[1,110],49:109},{4:[2,51],47:[2,51],51:[2,51],56:[2,51],59:[2,51],60:[2,51],61:[2,51]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],52:[1,111]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],58:[1,112]},{27:[1,50],28:[1,113],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{4:[2,22],17:[2,22],20:[2,22],24:[2,22],25:[2,22],27:[1,50],28:[2,22],31:[1,51],32:[1,52],33:[2,22],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,22],40:[2,22],47:[2,22],51:[2,22],52:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22]},{4:[2,23],17:[2,23],20:[2,23],24:[2,23],25:[2,23],27:[1,50],28:[2,23],31:[1,51],32:[1,52],33:[2,23],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,23],40:[2,23],47:[2,23],51:[2,23],52:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23]},{4:[2,24],17:[2,24],20:[2,24],24:[2,24],25:[2,24],27:[1,50],28:[2,24],31:[1,51],32:[1,52],33:[2,24],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,24],40:[2,24],47:[2,24],51:[2,24],52:[2,24],56:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24]},{4:[2,26],17:[2,26],20:[2,26],24:[2,26],25:[2,26],27:[2,26],28:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,26],40:[2,26],47:[2,26],51:[2,26],52:[2,26],56:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26]},{4:[2,27],17:[2,27],20:[2,27],24:[2,27],25:[2,27],27:[2,27],28:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],39:[2,27],40:[2,27],47:[2,27],51:[2,27],52:[2,27],56:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27]},{4:[2,28],17:[2,28],20:[2,28],24:[2,28],25:[2,28],27:[2,28],28:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],39:[2,28],40:[2,28],47:[2,28],51:[2,28],52:[2,28],56:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28]},{4:[2,29],17:[2,29],20:[2,29],24:[2,29],25:[2,29],27:[2,29],28:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],39:[2,29],40:[2,29],47:[2,29],51:[2,29],52:[2,29],56:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29]},{4:[2,11],17:[2,11],20:[2,11],24:[2,11],25:[2,11],27:[2,11],28:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],39:[2,11],40:[2,11],47:[2,11],51:[2,11],52:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11]},{4:[2,12],17:[2,12],20:[2,12],24:[2,12],25:[2,12],27:[2,12],28:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],39:[2,12],40:[2,12],47:[2,12],51:[2,12],52:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12]},{4:[2,14],17:[2,14],20:[2,14],24:[2,14],25:[2,14],27:[2,14],28:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],39:[2,14],40:[2,14],47:[2,14],51:[2,14],52:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14]},{4:[2,15],17:[2,15],20:[2,15],24:[2,15],25:[2,15],27:[2,15],28:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],39:[2,15],40:[2,15],47:[2,15],51:[2,15],52:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15]},{6:114,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{15:[1,116],21:115,41:65},{6:117,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:118,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:119,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:120,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:121,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{20:[1,122],40:[1,94]},{4:[2,30],17:[2,30],20:[2,30],24:[2,30],25:[2,30],27:[1,50],28:[2,30],31:[1,51],32:[1,52],33:[2,30],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[1,123],40:[2,30],47:[2,30],51:[2,30],52:[2,30],56:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30]},{6:124,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:125,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:126,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{4:[2,58],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,58],51:[2,58],56:[2,58],59:[2,58],60:[2,58],61:[2,58]},{4:[2,60],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,60],51:[2,60],56:[2,60],59:[2,60],60:[2,60],61:[2,60]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,45],51:[2,45],56:[2,45],59:[2,45],60:[2,45],61:[2,45]},{20:[1,127],40:[1,128]},{20:[2,47],40:[2,47]},{50:129,51:[1,8],53:9,54:10,55:11,56:[1,13],59:[1,14],60:[1,15],61:[1,16]},{6:130,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{13:131,15:[1,132]},{20:[2,33],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],40:[2,33]},{20:[2,37]},{42:[1,96]},{20:[2,35],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],40:[2,35]},{4:[2,16],17:[2,16],20:[2,16],24:[2,16],25:[2,16],27:[1,50],28:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,16],40:[2,16],47:[2,16],51:[2,16],52:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16]},{24:[1,133],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{4:[2,18],17:[2,18],20:[2,18],24:[2,18],25:[2,18],27:[1,50],28:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,18],40:[2,18],47:[2,18],51:[2,18],52:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18]},{24:[1,134],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57]},{4:[2,25],17:[2,25],20:[2,25],24:[2,25],25:[2,25],27:[2,25],28:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],39:[2,25],40:[2,25],47:[2,25],51:[2,25],52:[2,25],56:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25]},{15:[1,136],30:135},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],58:[1,137]},{4:[2,59],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,59],51:[2,59],56:[2,59],59:[2,59],60:[2,59],61:[2,59]},{4:[2,61],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,61],51:[2,61],56:[2,61],59:[2,61],60:[2,61],61:[2,61]},{48:[1,138]},{15:[1,110],49:139},{4:[2,52],47:[2,52],51:[2,52],56:[2,52],59:[2,52],60:[2,52],61:[2,52]},{4:[2,56],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,56],51:[2,56],56:[2,56],59:[2,56],60:[2,56],61:[2,56]},{29:[1,140]},{29:[2,34]},{6:141,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:142,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{4:[2,31],17:[2,31],20:[2,31],24:[2,31],25:[2,31],27:[2,31],28:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],39:[2,31],40:[2,31],47:[2,31],51:[2,31],52:[2,31],56:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31]},{38:[1,71]},{6:143,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{6:144,7:[1,25],8:[1,26],9:[1,27],10:[1,28],11:[1,29],12:[1,30],13:31,14:[1,32],15:[1,39],16:[1,33],18:[1,34],19:[1,35],23:[1,36],26:[1,37],30:38},{20:[2,48],40:[2,48]},{4:[2,20],17:[2,20],20:[2,20],24:[2,20],25:[2,20],27:[2,20],28:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],39:[2,20],40:[2,20],47:[2,20],51:[2,20],52:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20]},{4:[2,17],17:[2,17],20:[2,17],24:[2,17],25:[2,17],27:[1,50],28:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,17],40:[2,17],47:[2,17],51:[2,17],52:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17]},{4:[2,19],17:[2,19],20:[2,19],24:[2,19],25:[2,19],27:[1,50],28:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[1,54],35:[1,55],36:[1,56],37:[1,57],39:[2,19],40:[2,19],47:[2,19],51:[2,19],52:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19]},{4:[2,57],27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,57],51:[2,57],56:[2,57],59:[2,57],60:[2,57],61:[2,57]},{27:[1,50],31:[1,51],32:[1,52],33:[1,53],34:[1,54],35:[1,55],36:[1,56],37:[1,57],47:[2,46],51:[2,46],56:[2,46],59:[2,46],60:[2,46],61:[2,46]}],
defaultActions: {2:[2,1],5:[2,40],18:[2,2],19:[2,39],46:[2,42],115:[2,37],132:[2,34]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* skip multiline comments */
break;
case 3:return 9
break;
case 4:return 10
break;
case 5:return 11
break;
case 6:return 56
break;
case 7:return 60
break;
case 8:return 61
break;
case 9:return 57
break;
case 10:return 47
break;
case 11:return 7
break;
case 12:return 8
break;
case 13:return 59
break;
case 14:return 37
break;
case 15:return 36
break;
case 16:return 58
break;
case 17:return 38
break;
case 18:return 16
break;
case 19:return 17
break;
case 20:return 25
break;
case 21:return 51
break;
case 22:return 52
break;
case 23:return 39
break;
case 24:return 35
break;
case 25:return 24
break;
case 26:return 40
break;
case 27:return 32
break;
case 28:return 34
break;
case 29:return 42
break;
case 30:return 31
break;
case 31:return 62
break;
case 32:return 48
break;
case 33:return 12
break;
case 34:return 19
break;
case 35:return 20
break;
case 36:return 27
break;
case 37:return 29
break;
case 38:return 28
break;
case 39:return 33
break;
case 40:return 18
break;
case 41:return 14
break;
case 42:return 26
break;
case 43:return 23
break;
case 44:return 15
break;
case 45:return 4
break;
}
};
lexer.rules = [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:share\b)/,/^(?:subtype\b)/,/^(?:equals\b)/,/^(?:as\b)/,/^(?:typedef\b)/,/^(?:none\b)/,/^(?:top\b)/,/^(?:not\b)/,/^(?:\(\+\))/,/^(?:&)/,/^(?:\|\|)/,/^(?:#)/,/^(?:\()/,/^(?:\))/,/^(?:<:)/,/^(?:<)/,/^(?:>)/,/^(?:\+)/,/^(?:\*)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:::)/,/^(?::)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\/)/,/^(?:-o\b)/,/^(?:rw\b)/,/^(?:ref\b)/,/^(?:exists\b)/,/^(?:forall\b)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:$)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}